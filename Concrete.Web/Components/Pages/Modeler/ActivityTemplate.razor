@page "/modeler/activity-template/{TypeName}/{Id:guid}"
@rendermode InteractiveServer
@using Concrete.Core.Data.Api.Client
@using Concrete.Interface
@using Concrete.Modeler.Client
@using Template = Concrete.Core.Template.ActivityTemplate;
@inject IModelerClient client
@inject IDataClient dataClient

<PageTitle>ActivityTemplate</PageTitle>

@if(_template is not null)
{
    <form>
        <InputText @bind-Value="@_template.Name"/>
        <!--todo: localised name-->
    </form>

}

@if (_extensionUri is null)
{
    <div>Looking for extension editor</div>
}
else
{
    // todo: dns fucks up here. we get served an internal url
    <iframe style="height:80vh;width:100%" src="@(new Uri(_extensionUri, $"/{Type.Name}/{Id}"))" />
}

@code {
    [Parameter]
    public required string TypeName { get; set; }
    private ActivityTypeName Type => ActivityTypeName.Parse(TypeName, null);
    [Parameter]
    public Guid Id { get; set; }
    private Uri? _extensionUri;
    private Template? _template;

    protected override async Task OnInitializedAsync()
    {
        var templateTask = dataClient.GetActivityTemplate(Id, CancellationToken.None);
        _extensionUri = await client.GetExtensionEditorForActivityTypeAsync(
            Type,
            CancellationToken.None
        );
        _template = await templateTask;
    }
}
